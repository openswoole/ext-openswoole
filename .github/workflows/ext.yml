name: ext-openswoole

on:
  push:
  pull_request:
  # Allow to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-ubuntu-latest:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    steps:
    - uses: actions/checkout@v1
    - name: install-deps
      run: sudo apt update -y && sudo apt install -y libcurl4-openssl-dev php-curl libc-ares-dev
    - name: phpize
      run: phpize
    - name: build1
      run: ./configure && make clean && make -j$(sysctl -n hw.ncpu)
    - name: build2
      run: ./configure --enable-sockets --enable-mysqlnd --enable-http2 --enable-hook-curl
        --enable-openssl --enable-cares --enable-debug-log &&
        make clean && make -j$(sysctl -n hw.ncpu)

  build-centos:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    container: 'centos:latest'
    steps:
    - uses: actions/checkout@v1
    - name: fix-repo
      run: sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-Linux-* && 
           sed -i 's|#baseurl=http://mirror.centos.org|baseurl=https://vault.centos.org|g' /etc/yum.repos.d/CentOS-Linux-*
    - name: install-deps
      run: yum update -y && yum install -y gcc gcc-c++ make c-ares-devel php-devel curl php-curl libcurl-devel openssl-devel postgresql-devel
    - name: phpize
      run: phpize
    - name: build
      run: ./configure --enable-sockets --enable-mysqlnd --enable-http2 --enable-hook-curl
        --enable-openssl --enable-cares --with-postgres --enable-debug-log &&
        make clean && make -j$(sysctl -n hw.ncpu)

  build-macos-latest:
    runs-on: macos-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    steps:
    - name: install dependencies
      run: brew install openssl && brew link openssl && brew install curl && brew link curl && brew install c-ares && brew link c-ares
    - uses: actions/checkout@v1
    - name: phpize
      run: phpize
    - name: build1
      run: ./configure && make clean && make -j$(sysctl -n hw.ncpu)
    - name: build2
      run: ./configure --enable-sockets --enable-mysqlnd --enable-http2 --enable-hook-curl
        --enable-openssl --with-openssl-dir=/usr/local/opt/openssl@1.1 --enable-cares --enable-debug-log &&
        make clean && make -j$(sysctl -n hw.ncpu)

  build-alpine-latest:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    strategy:
      matrix:
        php-version: [ '8.1.0']
        alpine-version: [ '3.15' ]
        include:
          - php-version: '8.2.0'
            alpine-version: '3.16'
      max-parallel: 8
      fail-fast: false
    steps:
      - uses: actions/checkout@v1
      - name: build
        run: |
          cp .github/workflows/alpine.Dockerfile alpine.Dockerfile
          docker build -t openswoole . -f alpine.Dockerfile --build-arg PHP_VERSION=${{ matrix.php-version }} --build-arg ALPINE_VERSION=${{ matrix.alpine-version }}
